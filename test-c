#!/bin/bash

set -e

dir="$PWD"
testfiles=''
includedir="$dir/include"
srcdir="$dir/src"
testdir="$dir/tests"
watchmode=''

code_bold="\x1b[1m"
code_dim="\x1b[2m"
code_green="\x1b[32m"
code_red="\x1b[31m"
code_reset_all="\x1b[0m"
code_terminal_reset="\033c"
code_underlined="\x1b[4m"

function error() {
  echo "$0: $1" >&2
}

function ensure_directory() {
  if [[ ! -d "$dir/$1" ]]; then
    error "$1 was not a directory!"
    error "You may wish to run test-c --init-project"
    exit 1
  fi
}

function help() {
echo -e "
${code_underlined}test-c${code_reset_all}

test-c is a minimal and robust script to facilitate C unit testing.

${code_underlined}Usage${code_reset_all}:

test-c [OPTIONS] [FILES]

Without any OPTIONS or FILES test-c runs the test_*.c files under the tests/ directory.
Generated test files are placed adjacent to their respective tests as .test_*.c.

${code_underlined}Options${code_reset_all}:

--help, -h)

  Print this menu.

--init-project, -i)

  Initializes a project in the current directory as follows:

  1) mkdir -p include src tests
  2) Add ".test-*" to .gitignore if a .git directory exists.
  3) ln -s ~/.test-c/test-c.h include/test-c.h

--update, -u)

  Updates test-c to the latest version.

--watch, -w)

  Watches the current directory for changes to non-hidden files (currently requires inotifywait).
  When a change is found test-c runs the tests specified by FILES.

${code_underlined}Documentation${code_reset_all}:

https://github.com/kogosoftwarellc/test-c
"
}

while [[ "$#" != '0' ]]; do
  case "$1" in
    --help|-h)
      help
      exit;;
    --init-project|-i)
      mkdir -p "$dir/include" "$dir/src" "$dir/tests"
      rm -f "$dir/include/test-c.h"
      ln -s ~/.test-c/test-c.h "$dir/include/test-c.h"

      cat > "$srcdir/add.c" <<~
#include "add.h"

int add(int a, int b) {
  return a + b;
}
~
      cat > "$srcdir/add.h" <<~
extern int add(int, int);
~

      cat > "$testdir/test_add.c" <<~
#include <test-c.h>
#include <add.h>

TEST_C_START(it_works)
  int sum = add(5, 6);
  TEST_C_ASSERT_INT_EQUAL(sum, 11);
TEST_C_END
~

      if [[ -d "$dir/.git" ]]; then
        if [[ -f "$dir/.gitignore" ]]; then
          if [[ -z "`grep '\.test_*\.c' "$dir/.gitignore"`" ]]; then
            echo '.test_*.c' >> "$dir/.gitignore"
          else
            echo '.test_*.c' > "$dir/.gitignore"
          fi
        fi
      fi
      test-c
      exit;;
    --watch|-w)
      watchmode='1'
      shift 1;;
    --update|-u)
      curl -sk \
        https://raw.githubusercontent.com/kogosoftwarellc/test-c/master/install.bash \
        | bash
      exit;;
    *)
      testfiles="$testfiles $1"
      shift 1;;
  esac
done

ensure_directory include
ensure_directory src
ensure_directory tests

if [[ -z "$testfiles" ]]; then
  testfiles="`find "$testdir" -name 'test_*.c'`"
fi

sources="`find "$srcdir" -name '*.c'`"
headers="`find "$srcdir" -name '*.h'`"

result=0
for test in $testfiles;do
  tdir="$(dirname $test)"
  tfile="$(basename $test)"
  runs="`cat "$test" \
         | grep TEST_C_START \
         | sed 's|^.*TEST_C_START(\([^)]\+\)).*$|  result += __handle_test_result("\1", \1());|g'`"

  tmptestfile="$tdir/.$tfile"

  cat > "$tmptestfile" <<~
`cat $test`

int __handle_test_result(char *name, int result) {
  char *prefix;
  if (result) {
    prefix = "${code_red}FAIL${code_reset_all}";
  } else {
    prefix = "${code_green}PASS${code_reset_all}";
  }

  printf(" [%8s] %s\n", prefix, name);
  return result;
}

int main(void) {
  int result = 0;
$runs
  return result;
}
~

  exe="${tmptestfile}.exe"
  echo ''
  echo -e " ${code_bold}Running .`echo "$test" | sed "s|$dir||"`${code_reset_all}"
  echo ''
  gcc -o "$exe" -I"$srcdir" -I"$includedir" $sources "$tmptestfile" || true

  if [[ -f "$exe" ]]; then
    "$exe"
    testresult=$?
    echo ''

    if [[ $testresult ]]; then
      result=$(($result + $testresult))
    fi
    rm "$exe"
  fi
done

if [[ "$result" != '0' ]]; then
  error "$result test[s] failed!"

  if [[ -z "$watchmode" ]]; then
    exit $result
  fi
fi

if [[ -n "$watchmode" ]]; then
  while file="`inotifywait -r -e modify --exclude '/\..+' --format %f "$dir" 2>/dev/null`";do
    echo -e "$code_terminal_reset"
    $0 $testfiles || true
  done
fi
